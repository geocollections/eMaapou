version: 2.1

parameters:
  package-version:
    type: string
    default: 1.0.5

orbs:
  node: circleci/node@5.2.0

executors:
  docker-publisher:
    environment:
      IMAGE_NAME: geocollections/geoloogia
    docker:
      - image: cimg/node:20.10.0

jobs:
  build-and-test:
    executor: docker-publisher
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - node/install-packages:
          pkg-manager: npm
      - run:
          name: Run tests
          command: npm test
  build-image:
    executor: docker-publisher
    parameters:
      tags:
        description: "String of Docker image tags, defined using `-t`."
        type: string
    steps:
      - checkout
      - run:
          name: Build Docker image
          command: |
            docker build << parameters.tags >> .
      - run:
          name: Archive Docker image
          command: docker save -o image.tar $IMAGE_NAME
      - persist_to_workspace:
          root: .
          paths:
            - ./image.tar
  publish-image:
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archive Docker image
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: Publish Docker image to Docker Hub
          command: |
            echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
            docker push $IMAGE_NAME
  run-prod:
    executor: docker-publisher
    steps:
      - run:
          name: Run next container
          command: ssh -o "StrictHostKeyChecking no" -p ${PORT} ${USER}@${ADDRESS} "cd /var/www/geoloogia/script && . run_production.sh"
  run-stage:
    executor: docker-publisher
    steps:
      - run:
          name: Run dev container
          command: ssh -o "StrictHostKeyChecking no" -p ${PORT} ${USER}@${ADDRESS} "cd /var/www/geoloogia/script && . run_staging.sh"
workflows:
  build_deploy_dev:
    when:
      equal: [develop, << pipeline.git.branch >>]
    jobs:
      - build-and-test
      - build-image:
          requires:
            - build-and-test
          tags: -t $IMAGE_NAME:dev
      - publish-image:
          requires:
            - build-image
      - run-stage:
          requires:
            - publish-image
  build_deploy_prod:
    when:
      equal: [main, << pipeline.git.branch >>]
    jobs:
      - build-image:
          tags: -t $IMAGE_NAME:latest -t $IMAGE_NAME:<< pipeline.parameters.package-version >>
      - publish-image:
          requires:
            - build-image
      - run-prod:
          requires:
            - publish-image
