version: 2.1

orbs:
  node: circleci/node@4.1.0

parameters:
  package-version:
    type: string
    default: "1.0.5"

executors:
  docker-publisher:
    environment:
      IMAGE_NAME: geocollections/geoloogia
      IMAGE_NAME_DEV: geocollections/geoloogia-dev
    docker:
      - image: circleci/node:lts-stretch

jobs:
  build_docker_image:
    executor: docker-publisher
    steps:
      - checkout
      - setup_remote_docker
      - when:
          condition:
            equal: [ "production", << pipeline.git.branch >> ]
          steps:
            - run:
                name: Build Docker image
                command: |
                  docker build -t $IMAGE_NAME:<< pipeline.parameters.package-version >> -t $IMAGE_NAME:latest .
            - run:
                name: Archive Docker image
                command: docker save -o image.tar $IMAGE_NAME
      - when:
          condition:
            equal: [ "development", << pipeline.git.branch >> ]
          steps:
            - run:
                name: Build Docker dev image
                command: |
                  docker build -t $IMAGE_NAME_DEV:<< pipeline.parameters.package-version >> -t $IMAGE_NAME_DEV:latest .
            - run:
                name: Archive Docker dev image
                command: docker save -o image.tar $IMAGE_NAME_DEV
      - persist_to_workspace:
          root: .
          paths:
            - ./image.tar

  publish_docker_image:
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archive Docker image
          command: docker load -i /tmp/workspace/image.tar
      - when:
          condition:
            equal: [ "production", << pipeline.git.branch >> ]
          steps:
            - run:
                name: Publish Docker image to Docker Hub
                command: |
                  echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
                  docker push $IMAGE_NAME
      - when:
          condition:
            equal: [ "development", << pipeline.git.branch >> ]
          steps:
            - run:
                name: Publish Docker dev image to Docker Hub
                command: |
                  echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
                  docker push $IMAGE_NAME_DEV

  run_docker_image:
    executor: docker-publisher
    steps:
      - run:
          name: Run Docker image
          command: ssh -o "StrictHostKeyChecking no" -p ${PORT} ${USER}@${ADDRESS} "cd /var/www/geoloogia/script && . run_docker_image.sh"

  run_docker_image_dev:
    executor: docker-publisher
    steps:
      - run:
          name: Run Docker image
          command: ssh -o "StrictHostKeyChecking no" -p ${PORT} ${USER}@${ADDRESS} "cd /var/www/geoloogia-dev/script && . run_docker_image.sh"

workflows:
  build:
    jobs:
      - build_docker_image:
          filters:
            branches:
              only: [development, production]
      - publish_docker_image:
          requires:
            - build_docker_image
      - run_docker_image:
          requires:
            - publish_docker_image
          filters:
            branches:
              only: production
      - run_docker_image_dev:
          requires:
            - publish_docker_image
          filters:
            branches:
              only: development
